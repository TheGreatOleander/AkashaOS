<Task sr="task3" ve="2">
    <cname>Advanced Compression</cname>
    <Action sr="act0" ve="7">
        <code>130</code>
        <label>Huffman Tree Compression</label>
        <Str sr="arg0" ve="3">
        // Huffman Tree Compression for AI bridge
        var text = "%file_content";

        // Step 1: Frequency analysis
        var freq = {};
        for (var i = 0; i < text.length; i++) {
            var char = text[i];
            freq[char] = (freq[char] || 0) + 1;
        }

        // Step 2: Build the Huffman Tree
        var huffmanTree = buildHuffmanTree(freq);
        var huffmanCodes = generateHuffmanCodes(huffmanTree);

        // Step 3: Encode the text using Huffman codes
        var compressed = text.split('').map(function(char) {
            return huffmanCodes[char];
        }).join('');

        // Return the compressed result
        return compressed;
        </Str>
        <Str sr="arg1" ve="3">%compressed_result</Str>
        <Int sr="arg2" val="1"/>
        <Int sr="arg3" val="45"/>
        <Int sr="arg4" val="0"/>
        <Int sr="arg5" val="3"/>
    </Action>
</Task>

<script>
// Utility function to build the Huffman tree
function buildHuffmanTree(freq) {
    var nodes = Object.keys(freq).map(function(char) {
        return { char: char, freq: freq[char] };
    });
    
    while (nodes.length > 1) {
        nodes.sort(function(a, b) { return a.freq - b.freq; });
        
        var left = nodes.shift();
        var right = nodes.shift();
        
        var newNode = { 
            char: null, 
            freq: left.freq + right.freq, 
            left: left, 
            right: right 
        };
        
        nodes.push(newNode);
    }
    
    return nodes[0]; // The root of the Huffman tree
}

// Utility function to generate Huffman codes from the tree
function generateHuffmanCodes(node, prefix = "") {
    if (node.char) {
        return { [node.char]: prefix };
    }
    
    var codes = {};
    Object.assign(codes, generateHuffmanCodes(node.left, prefix + "0"));
    Object.assign(codes, generateHuffmanCodes(node.right, prefix + "1"));
    return codes;
}
</script>
