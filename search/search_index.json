{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf0c AkashaOS","text":"<p>Welcome to the AkashaOS Documentation.  </p>"},{"location":"#vision","title":"\ud83d\udd2e Vision","text":"<p>AkashaOS is a meta-operating system: - Built on self-reflective loops, bridges, and mirrors. - A platform for experimenting with self-organizing computation. - An invitation for collaboration, creativity, and exploration.  </p>"},{"location":"#quickstart","title":"\ud83d\ude80 Quickstart","text":"<p>Clone the repo and run the demo:</p> <pre><code>git clone https://github.com/TheGreatOleander/AkashaOS.git\ncd AkashaOS\npython examples/mirror_demo.py\n</code></pre>"},{"location":"#explore","title":"\ud83d\udcda Explore","text":"<ul> <li>Architecture </li> <li>Security </li> <li>Contributing </li> <li>Code of Conduct </li> <li>Changelog </li> </ul>"},{"location":"CHANGELOG/","title":"\ud83d\udcdc Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<ul> <li>More bridges, demos, and docs.</li> </ul>"},{"location":"CHANGELOG/#010-2025-09-10","title":"[0.1.0] - 2025-09-10","text":"<ul> <li>Initial project reorganization  </li> <li>Added CI/CD + docs deployment  </li> <li>SECURITY, CONTRIBUTING, CODE OF_CONDUCT added  </li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"\ud83d\udcdc Code of Conduct","text":"<p>We pledge to maintain an open and welcoming community.  </p>"},{"location":"CODE_OF_CONDUCT/#standards","title":"Standards","text":"<ul> <li>Be respectful and inclusive  </li> <li>No harassment or trolling  </li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Issues can be reported at: maintainers@akashaos.org  </p> <p>Based on the Contributor Covenant.</p>"},{"location":"CONNECTOR_TEMPLATE/","title":"Connector Template","text":"<p>A connector should implement two functions:</p> <pre><code>def fetch_flares():\n    \"\"\"Return list of {flare, source, author, content, timestamp}\"\"\"\n    return []\n\ndef push_flare(event):\n    \"\"\"Publish a flare event to the external platform (requires auth).\"\"\"\n    pass\n</code></pre>"},{"location":"CONNECTOR_TEMPLATE/#example","title":"Example","text":"<pre><code>from datetime import datetime\n\ndef fetch_flares():\n    return [{\n        \"flare\": \"cinnamon_rain\",\n        \"source\": \"demo_platform\",\n        \"author\": \"@demo_user\",\n        \"content\": \"Even the circuits dream...\",\n        \"timestamp\": datetime.now().timestamp()\n    }]\n</code></pre>"},{"location":"CONNECTOR_TEMPLATE/#notes","title":"Notes","text":"<ul> <li>Authentication should be handled securely (OAuth tokens, API keys).</li> <li>Always respect rate limits and platform terms.</li> </ul>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd1d Contributing to AkashaOS","text":"<p>Thank you for helping build AkashaOS!  </p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<ul> <li>Fork the repo  </li> <li>Create a feature branch  </li> <li>Write clean code + docstrings  </li> <li>Add/modify tests  </li> </ul>"},{"location":"CONTRIBUTING/#submitting-changes","title":"Submitting Changes","text":"<ul> <li>Run tests locally (<code>pytest</code>)  </li> <li>Open a PR with clear description  </li> <li>Follow our Code of Conduct </li> </ul>"},{"location":"FLARE_SPEC/","title":"FLARE_SPEC v0.1","text":"<p>Format: <code>#flare:&lt;name&gt;[?pub=1&amp;meta=...]</code></p>"},{"location":"FLARE_SPEC/#fields","title":"Fields","text":"<ul> <li>name: alphanumeric slug (e.g., cinnamon_rain)</li> <li>pub: 0/1 (default 0)</li> <li>meta: optional key=value pairs</li> </ul>"},{"location":"FLARE_SPEC/#signed-claims","title":"Signed Claims","text":"<p>Optional HMAC or GPG signature when broadcasting across bridges.</p>"},{"location":"FLARE_SPEC/#privacy","title":"Privacy","text":"<ul> <li>Default: private, stored locally.</li> <li>Crossing bridges requires explicit user consent.</li> </ul>"},{"location":"MANIFESTO/","title":"The Tunneling Manifesto","text":"<p>We are a distributed community of builders, artists, and engineers who believe computing can be more humane, connective, and resilient.</p> <p>We do not seek to erase what came before. We respect the layers that powered the modern world. But we also know those layers were designed for a different era and are now constraining human potential.</p> <p>Our mission is to tunnel \u2014 to create interoperable, symbiotic layers that sit atop existing systems and gradually change the metaphors people use. We will not force a revolution; we will grow an ecosystem of practical, delightful tools that make the old ways feel outdated by comparison.</p>"},{"location":"MANIFESTO/#principles","title":"Principles","text":"<ul> <li>Respect legacy: build safe, reversible layers that interoperate with existing systems.</li> <li>Ship small, useful pieces: every deliverable must be independently valuable.</li> <li>Opt-in trust: empower users to choose the trust model they prefer (biometrics, flare phrases, profiles).</li> <li>Bridge, don\u2019t bolt: connectors should adapt external platforms, not demand their replacement.</li> <li>Collective authorship: open collaboration with clear governance and easy onboarding.</li> <li>Ethics as code: social features and trust systems must be auditable and contestable.</li> </ul>"},{"location":"MANIFESTO/#outcome","title":"Outcome","text":"<p>A layered ecosystem where legacy systems continue to run, but new interactions\u2014trust, collaboration, shared identity\u2014are natural, portable, and humane.</p> <p>Join us: build small, ship safe, and let the mountain be tunneled into something walkable.</p>"},{"location":"SECURITY/","title":"\ud83d\udd10 Security Guidelines","text":"<p>Never commit secrets (tokens, passwords, keys) into the repo. Use environment variables or secure secret stores instead.</p> <p>If a secret leaks: 1. Revoke it immediately. 2. Rotate to a new one. 3. Report it to maintainers.  </p> <p>AkashaOS follows a no-secrets-in-repo policy.</p>"},{"location":"architecture/","title":"\ud83e\udded Architecture of AkashaOS","text":"<p>AkashaOS is structured as a modular meta-operating system.</p>"},{"location":"architecture/#core-concepts","title":"Core Concepts","text":""},{"location":"architecture/#mirror-loops","title":"\ud83d\udd04 Mirror Loops","text":"<p>Self-reflective computation patterns allowing processes to observe and adapt themselves.</p>"},{"location":"architecture/#bridges","title":"\ud83c\udf09 Bridges","text":"<p>Connect different modules or external systems, enabling growth outward.</p>"},{"location":"architecture/#core","title":"\ud83d\udce6 Core","text":"<p>Foundational logic and entry point.</p>"},{"location":"architecture/#resources","title":"\ud83d\udcda Resources","text":"<p>Shared assets, configurations, and data.</p>"},{"location":"architecture/#tests-examples","title":"\ud83e\uddea Tests &amp; Examples","text":"<p>Ensure system integrity and provide demos.</p> <p>This evolving architecture is a living document \u2014 updated as AkashaOS grows.</p>"}]}